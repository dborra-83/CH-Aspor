AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: ASPOR Document Extraction Platform with Bedrock Claude

Globals:
  Function:
    Runtime: python3.12
    Environment:
      Variables:
        DYNAMODB_TABLE: !Ref ExtractionsTable
        DOCUMENTS_BUCKET: !Ref DocumentsBucket

Resources:
  # DynamoDB Table
  ExtractionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: aspor-extractions
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: gsi1pk
          AttributeType: S
        - AttributeName: gsi1sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: gsi1pk
              KeyType: HASH
            - AttributeName: gsi1sk
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  # S3 Buckets
  DocumentsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'aspor-documents-${AWS::AccountId}'
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
            AllowedHeaders:
              - '*'

  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'aspor-website-${AWS::AccountId}'
      WebsiteConfiguration:
        IndexDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub '${WebsiteBucket.Arn}/*'

  # API Gateway
  AsporApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: prod
      CorsConfiguration:
        AllowMethods:
          - "*"
        AllowHeaders:
          - "*"
        AllowOrigins:
          - "*"

  # Lambda Functions
  PresignFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: aspor-presign
      Handler: lambda_code.handler
      CodeUri: ./lambda_presign.py
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref DocumentsBucket
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref AsporApi
            Path: /runs/presign
            Method: POST

  CreateRunFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: aspor-create-run
      Handler: lambda_code.handler
      CodeUri: ./lambda_code_v2.py
      Environment:
        Variables:
          PROCESS_FUNCTION: !Ref ProcessRunFunction
      Timeout: 30
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ExtractionsTable
        - S3CrudPolicy:
            BucketName: !Ref DocumentsBucket
        - LambdaInvokeFunction:
            FunctionName: !Ref ProcessRunFunction
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref AsporApi
            Path: /runs
            Method: POST

  ProcessRunFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: aspor-process-run
      Handler: lambda_code.handler
      CodeUri: ./lambda_process_run.py
      Timeout: 900  # 15 minutes
      MemorySize: 3008
      ReservedConcurrentExecutions: 5
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ExtractionsTable
        - S3CrudPolicy:
            BucketName: !Ref DocumentsBucket
        - Statement:
          - Effect: Allow
            Action:
              - textract:*
              - bedrock:InvokeModel
            Resource: '*'

  GetRunFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: aspor-get-run
      Handler: lambda_code.handler
      CodeUri: ./lambda_get_run.py
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ExtractionsTable
        - S3ReadPolicy:
            BucketName: !Ref DocumentsBucket
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref AsporApi
            Path: /runs/{runId}
            Method: GET

  ListRunsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: aspor-list-runs
      Handler: lambda_code.handler
      CodeUri: ./lambda_list_runs.py
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ExtractionsTable
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref AsporApi
            Path: /runs
            Method: GET

  DeleteRunFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: aspor-delete-run
      Handler: lambda_code.handler
      CodeUri: ./lambda_delete_run.py
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ExtractionsTable
        - S3CrudPolicy:
            BucketName: !Ref DocumentsBucket
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref AsporApi
            Path: /runs/{runId}
            Method: DELETE

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: S3Origin
            DomainName: !Sub '${WebsiteBucket}.s3-website-${AWS::Region}.amazonaws.com'
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6  # Managed-CachingOptimized
        PriceClass: PriceClass_100

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${AsporApi}.execute-api.${AWS::Region}.amazonaws.com/prod'
  
  WebsiteURL:
    Description: CloudFront distribution URL
    Value: !Sub 'https://${CloudFrontDistribution.DomainName}'
  
  DocumentsBucketName:
    Description: S3 bucket for documents
    Value: !Ref DocumentsBucket
  
  DynamoDBTableName:
    Description: DynamoDB table name
    Value: !Ref ExtractionsTable