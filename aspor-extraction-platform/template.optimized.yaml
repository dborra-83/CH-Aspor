AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: ASPOR Document Extraction Platform with Bedrock Claude 4.0

Globals:
  Function:
    Timeout: 60  # Default timeout for most functions
    Runtime: python3.12
    MemorySize: 512  # Default memory for most functions
    Environment:
      Variables:
        BEDROCK_MODEL_ID: !Ref BedrockModelId
        DOCUMENTS_BUCKET: !Ref DocumentsBucket
        DYNAMODB_TABLE: !Ref ExtractionsTable
        AGENT_A_PROMPT_PARAM: !Ref AgentAPromptParameter
        AGENT_B_PROMPT_PARAM: !Ref AgentBPromptParameter
        MAX_FILES: 3
        MAX_FILE_SIZE_MB: 25

Parameters:
  BedrockModelId:
    Type: String
    Default: anthropic.claude-3-opus-20240229
    Description: Bedrock model ID for Claude
  
  ApiKeyValue:
    Type: String
    NoEcho: true
    Default: "demo-api-key-12345"
    Description: API Key for demo authentication

Resources:
  # S3 Bucket for documents
  DocumentsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub aspor-documents-${AWS::AccountId}
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldFiles
            Status: Enabled
            ExpirationInDays: 90
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, DELETE]
            AllowedOrigins: ['*']
            MaxAge: 3600

  # DynamoDB Table
  ExtractionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: aspor-extractions
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: gsi1pk
          AttributeType: S
        - AttributeName: gsi1sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: gsi1pk
              KeyType: HASH
            - AttributeName: gsi1sk
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  # SSM Parameters for prompts
  AgentAPromptParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /aspor/prompts/agent-a-contragarantias
      Type: String
      Value: !Sub |
        ${AWS::StackName}-PLACEHOLDER-CONTRAGARANTIAS
        This will be replaced with actual prompt during deployment

  AgentBPromptParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /aspor/prompts/agent-b-informes
      Type: String
      Value: !Sub |
        ${AWS::StackName}-PLACEHOLDER-INFORMES
        This will be replaced with actual prompt during deployment

  # API Gateway
  AsporApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: prod
      CorsConfiguration:
        AllowMethods:
          - "*"
        AllowHeaders:
          - "*"
        AllowOrigins:
          - "*"

  # Lambda Functions
  PresignFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: aspor-presign
      Handler: src/handlers/presign.handler
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref DocumentsBucket
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref AsporApi
            Path: /runs/presign
            Method: POST

  CreateRunFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: aspor-create-run
      Handler: src/handlers/create_run.handler
      Timeout: 900
      MemorySize: 3008
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ExtractionsTable
        - S3CrudPolicy:
            BucketName: !Ref DocumentsBucket
        - Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
                - bedrock:InvokeModelWithResponseStream
              Resource: "*"
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
              Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/aspor/prompts/*"
        - Statement:
            - Effect: Allow
              Action:
                - textract:DetectDocumentText
                - textract:AnalyzeDocument
              Resource: "*"
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref AsporApi
            Path: /runs
            Method: POST

  GetRunFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: aspor-get-run
      Handler: src/handlers/get_run.handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ExtractionsTable
        - S3ReadPolicy:
            BucketName: !Ref DocumentsBucket
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref AsporApi
            Path: /runs/{runId}
            Method: GET

  ListRunsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: aspor-list-runs
      Handler: src/handlers/list_runs.handler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref ExtractionsTable
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref AsporApi
            Path: /runs
            Method: GET

  DeleteRunFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: aspor-delete-run
      Handler: src/handlers/delete_run.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ExtractionsTable
        - S3CrudPolicy:
            BucketName: !Ref DocumentsBucket
      Events:
        ApiEvent:
          Type: HttpApi
          Properties:
            ApiId: !Ref AsporApi
            Path: /runs/{runId}
            Method: DELETE

  # Static Website
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub aspor-website-${AWS::AccountId}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "${WebsiteBucket.Arn}/*"

  # CloudFront Distribution
  WebsiteDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt WebsiteBucket.WebsiteURL
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
        Enabled: true
        DefaultRootObject: index.html

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${AsporApi}.execute-api.${AWS::Region}.amazonaws.com/prod"
  
  WebsiteURL:
    Description: CloudFront distribution URL
    Value: !Sub "https://${WebsiteDistribution.DomainName}"
  
  DocumentsBucketName:
    Description: S3 bucket for documents
    Value: !Ref DocumentsBucket
  
  DynamoDBTableName:
    Description: DynamoDB table name
    Value: !Ref ExtractionsTable